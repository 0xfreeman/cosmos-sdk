// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mock_vesting_accounts.proto

package vesting

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MockVestedDelegateVestingAccount struct {
	*types.ContinuousVestingAccount `protobuf:"bytes,1,opt,name=continuous_vesting_account,json=continuousVestingAccount,proto3,embedded=continuous_vesting_account" json:"continuous_vesting_account,omitempty"`
}

func (m *MockVestedDelegateVestingAccount) Reset()      { *m = MockVestedDelegateVestingAccount{} }
func (*MockVestedDelegateVestingAccount) ProtoMessage() {}
func (*MockVestedDelegateVestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd82476432099093, []int{0}
}
func (m *MockVestedDelegateVestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MockVestedDelegateVestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MockVestedDelegateVestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MockVestedDelegateVestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockVestedDelegateVestingAccount.Merge(m, src)
}
func (m *MockVestedDelegateVestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *MockVestedDelegateVestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MockVestedDelegateVestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MockVestedDelegateVestingAccount proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MockVestedDelegateVestingAccount)(nil), "vesting.MockVestedDelegateVestingAccount")
}

func init() { proto.RegisterFile("mock_vesting_accounts.proto", fileDescriptor_fd82476432099093) }

var fileDescriptor_fd82476432099093 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xce, 0xcd, 0x4f, 0xce,
	0x8e, 0x2f, 0x4b, 0x2d, 0x2e, 0xc9, 0xcc, 0x4b, 0x8f, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b,
	0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x8a, 0x4b, 0x89, 0xa4, 0xe7, 0xa7,
	0xe7, 0x83, 0xc5, 0xf4, 0x41, 0x2c, 0x88, 0xb4, 0x94, 0x4a, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0xb1,
	0x3e, 0x54, 0x95, 0x7e, 0x99, 0x61, 0x52, 0x6a, 0x49, 0xa2, 0x21, 0x8c, 0x0f, 0x51, 0xa5, 0xb4,
	0x88, 0x91, 0x4b, 0xc1, 0x37, 0x3f, 0x39, 0x3b, 0x2c, 0xb5, 0xb8, 0x24, 0x35, 0xc5, 0x25, 0x35,
	0x27, 0x35, 0x3d, 0xb1, 0x24, 0x35, 0x0c, 0xa2, 0xc6, 0x11, 0x62, 0xa1, 0x50, 0x09, 0x97, 0x54,
	0x72, 0x7e, 0x5e, 0x49, 0x66, 0x5e, 0x69, 0x7e, 0x69, 0x31, 0xba, 0x73, 0x24, 0x18, 0x15, 0x18,
	0x35, 0xb8, 0x8d, 0x0c, 0xf4, 0x20, 0xf6, 0xe9, 0xc1, 0xcc, 0x87, 0xda, 0xa7, 0xe7, 0x0c, 0xd7,
	0x89, 0x6a, 0xaa, 0x13, 0xcb, 0x85, 0x7b, 0xf2, 0x8c, 0x41, 0x12, 0xc9, 0x38, 0xe4, 0xad, 0x38,
	0x3a, 0x16, 0xc8, 0x33, 0xcc, 0x58, 0x20, 0xcf, 0xe0, 0xe4, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9,
	0xfa, 0x50, 0xff, 0x42, 0x28, 0xdd, 0xe2, 0x94, 0x6c, 0xfd, 0x92, 0xd4, 0xe2, 0x92, 0xd2, 0x92,
	0xcc, 0x1c, 0x98, 0x9f, 0x93, 0xd8, 0xc0, 0x9e, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff,
	0x3b, 0xee, 0x53, 0x58, 0x01, 0x00, 0x00,
}

func (m *MockVestedDelegateVestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MockVestedDelegateVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MockVestedDelegateVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContinuousVestingAccount != nil {
		{
			size, err := m.ContinuousVestingAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMockVestingAccounts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMockVestingAccounts(dAtA []byte, offset int, v uint64) int {
	offset -= sovMockVestingAccounts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MockVestedDelegateVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContinuousVestingAccount != nil {
		l = m.ContinuousVestingAccount.Size()
		n += 1 + l + sovMockVestingAccounts(uint64(l))
	}
	return n
}

func sovMockVestingAccounts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMockVestingAccounts(x uint64) (n int) {
	return sovMockVestingAccounts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MockVestedDelegateVestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockVestingAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MockVestedDelegateVestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MockVestedDelegateVestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuousVestingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockVestingAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMockVestingAccounts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMockVestingAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContinuousVestingAccount == nil {
				m.ContinuousVestingAccount = &types.ContinuousVestingAccount{}
			}
			if err := m.ContinuousVestingAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockVestingAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockVestingAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMockVestingAccounts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMockVestingAccounts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockVestingAccounts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockVestingAccounts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMockVestingAccounts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMockVestingAccounts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMockVestingAccounts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMockVestingAccounts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMockVestingAccounts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMockVestingAccounts = fmt.Errorf("proto: unexpected end of group")
)
